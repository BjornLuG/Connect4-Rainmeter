function Initialize()
    local xPos = SELF:GetNumberOption("X")
    local yPos = SELF:GetNumberOption("Y")
    local col = SELF:GetNumberOption("Col")
    local row = SELF:GetNumberOption("Row")
    local spacing = SELF:GetNumberOption("Spacing")
    local holeRadius = SELF:GetNumberOption("HoleRadius")
    local innerRadius = SELF:GetNumberOption("InnerRadius")
	local sectionName = SELF:GetOption("SectionName")

    local size = col * row
    local width = col * holeRadius * 2 + (col + 1) * spacing
    local height = row * holeRadius * 2 + (row + 1) * spacing

	local file = io.open(SKIN:MakePathAbsolute(SELF:GetOption("IncFile")), "w")
	
	local t = { "; Auto-generated by " .. SELF:GetName() }
    
	table.insert(t, "\n[" .. sectionName .. "]")
    table.insert(t, "Meter=Shape")
	table.insert(t, "X=" .. xPos)
	table.insert(t, "Y=" .. yPos)
	table.insert(t, "Shape=Rectangle 0,0," .. width .. "," .. height .. " | Fill Color 0,0,0")
    
    local finalExcludeString = "Shape" .. (size+2) .. "=Combine Shape" 
    local shapeCounter = 1
    for i=0, row-1 do
        local y = i * holeRadius * 2 + (i + 1) * spacing
        for j=0, col-1 do
            shapeCounter = shapeCounter + 1
            local x = j * holeRadius * 2 + (j + 1) * spacing
            table.insert(t, "Shape" .. shapeCounter .. "=Ellipse" .. (x + holeRadius) .. "," .. (y + holeRadius) .. "," .. (holeRadius - 2 * innerRadius) .. " | Fill Color 255,255,255")
            finalExcludeString = finalExcludeString .. " | Exclude Shape" .. shapeCounter
        end
    end

    table.insert(t, finalExcludeString)
	
	file:write(table.concat(t, "\n"))
	file:close()
end
